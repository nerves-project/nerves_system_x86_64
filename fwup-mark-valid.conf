# Mark firmware valid for x86_64
#
# To use:
#   1. Run `fwup -c -f fwup-mark-valid.conf -o mark_valid.fw` and copy
#      mark_valid.fw to the device. This is done automatically as part of the Nerves
#      system build process. The file is stored in `/usr/share/fwup/mark_valid.fw`.
#   2. On the device, run `fwup -t mark_valid mark_valid.fw -d $NERVES_FW_DEVPATH`.
#
# It is critical that this is kept in sync with the main fwup.conf.

require-fwup-version="0.19.0"

#
# Firmware metadata
#

# All of these can be overriden using environment variables of the same name.
#
#  Run 'fwup -m' to query values in a .fw file.
#  Use 'fw_printenv' to query values on the target.
#
# These are used by Nerves libraries to introspect.
define(NERVES_FW_PRODUCT, "Nerves Firmware")
define(NERVES_FW_DESCRIPTION, "")
define(NERVES_FW_VERSION, "${NERVES_SDK_VERSION}")
define(NERVES_FW_PLATFORM, "x86_64")
define(NERVES_FW_ARCHITECTURE, "x86_64")
define(NERVES_FW_AUTHOR, "The Nerves Team")

# This variable is used to control whether firmware is validated automatically
define(NERVES_FW_AUTOVALIDATE, "1")

# /dev/rootdisk* paths are provided by erlinit to refer to the disk and partitions
# on whatever drive provides the rootfs.
define(NERVES_FW_DEVPATH, "/dev/rootdisk0")
define(NERVES_FW_APPLICATION_PART0_DEVPATH, "/dev/rootdisk0p4") # Linux part number is 1-based
define(NERVES_FW_APPLICATION_PART0_FSTYPE, "ext4")
define(NERVES_FW_APPLICATION_PART0_TARGET, "/root")

# Default paths if not specified via the commandline
define(ROOTFS, "${NERVES_SYSTEM}/images/rootfs.squashfs")

# This configuration file will create an image that has an MBR and the
# following 3 partitions:
#
# +----------------------------+
# | MBR w/ Grub boot code      |
# +----------------------------+
# | grub.img (<256K)           |
# +----------------------------+
# | Firmware configuration data|
# | (formatted as uboot env)   |
# +----------------------------+
# | Boot partition (FAT32)     |
# | /boot/grub/grub.cfg        |
# | /boot/grub/grubenv         |
# +----------------------------+
# | p2: Rootfs A (squashfs)    |
# +----------------------------+
# | p3: Rootfs B (squashfs)    |
# +----------------------------+
# | p4: Application (ext4)     |
# +----------------------------+

define(UBOOT_ENV_OFFSET, 2048)
define(UBOOT_ENV_COUNT, 16)  # 8 KB

# The boot partition contains the bootloader configuration
# 16 MB should be plenty for now.
define(BOOT_PART_OFFSET, 4096)
define(BOOT_PART_COUNT, 31232)

# Let the rootfs have room to grow up to 256 MiB
define-eval(ROOTFS_A_PART_OFFSET, "${BOOT_PART_OFFSET} + ${BOOT_PART_COUNT}")
define(ROOTFS_A_PART_COUNT, 524288)
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})

# Application data partition (10 GiB). This can be enlarged
# to fill the entire volume.
define-eval(APP_PART_OFFSET, "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}")
define(APP_PART_COUNT, 20971520)

# Firmware archive metadata
meta-product = ${NERVES_FW_PRODUCT}
meta-description = ${NERVES_FW_DESCRIPTION}
meta-version = ${NERVES_FW_VERSION}
meta-platform = ${NERVES_FW_PLATFORM}
meta-architecture = ${NERVES_FW_ARCHITECTURE}
meta-author = ${NERVES_FW_AUTHOR}
meta-vcs-identifier = ${NERVES_FW_VCS_IDENTIFIER}
meta-misc = ${NERVES_FW_MISC}

file-resource grubenv_a {
    host-path = "${NERVES_SYSTEM}/images/grubenv_a_valid_1"
}
file-resource grubenv_b {
    host-path = "${NERVES_SYSTEM}/images/grubenv_b_valid_1"
}

mbr mbr {
    bootstrap-code-host-path = "${NERVES_SYSTEM}/images/boot.img"
    signature = 0x04030201

    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 3 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0x83 # Linux
    }
}

# Location where installed firmware information is stored.
# While this is called "u-boot", u-boot isn't involved in this
# setup. It just provides a convenient key/value store format.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

task mark_valid.a {
    # Check that the firmware has not already been marked valid
    require-uboot-variable(uboot-env, "nerves_fw_validated", "0")

    on-resource grubenv_a {
        info("Marking firmware valid")
        uboot_setenv(uboot-env, "nerves_fw_validated", "1")
        fat_write(${BOOT_PART_OFFSET}, "/boot/grub/grubenv")
    }
}

task mark_valid.b {
    # Check that the firmware has not already been marked valid
    require-uboot-variable(uboot-env, "nerves_fw_validated", "0")

    on-resource grubenv_b {
        info("Marking firmware valid")
        uboot_setenv(uboot-env, "nerves_fw_validated", "1")
        fat_write(${BOOT_PART_OFFSET}, "/boot/grub/grubenv")
    }
}

task mark_valid.already_valid {
    on-init {
        error("Firmware has already been marked valid")
    }
}

# Run "fwup /usr/share/fwup/mark_valid.fw -t status -d /dev/rootdisk0 -q -U" to check the status.
task status.validated {
    require-uboot-variable(uboot-env, "nerves_fw_validated", "1")
    on-init { info("Validated") }
}
task status.unvalidated {
    require-uboot-variable(uboot-env, "nerves_fw_validated", "0")
    on-init { info("Unvalidated") }
}
